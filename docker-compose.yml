version: "3"

# トップレベルに書く「名前付きvolumes」は複数サービスから参照できる
volumes:
  postgres_data:
  static_data:
  media_data:

services:
  app:
    build:
      context: .
    # ports:
    #   - 8000:8081
    expose:
      - 3031
    volumes:
      - ./app:/app
      - static_data:/app/static/
    command: python3 manage.py runserver 0.0.0.0:3031
    # command: gunicorn --bind 0.0.0.0:8081 config.wsgi
    #デプロイ用
    # command: gunicorn --bind 0.0.0.0:3031 config.wsgi
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_NAME=app
      - DB_USER=postgres
      - DB_PASS=password
    depends_on:
      - db
  db:
    # image: postgres:10-alpine
    image: postgres
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password

  nginx:
    image: nginx
    depends_on:
      - app
    ports:
      - 80:80
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - static_data:/static
      - ./app/media:/media
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# リクエストの流れ 2020 5 27
# nginx:
#   ports: 　　
#     - 8000:80
#以下の8000というポートがブラウザーから最初にリクエストされるポート
# nginxコンテナがポート8000を開け、そこにリクエストがきたら、コンテナの中のnginxの80
# ポートに転送される

# nginxのconfで設定した通り、今度はappコンテナにアクセスがいく。appコンテナにアクセス
# できるようにexposeで,3031ポートを開けておく。
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# nginxの設定に関して　　2020 5 27

# nginx:
#   volumes:
# - ./nginx:/etc/nginx/conf.d

# nginxのコンテナの/nginx:/etc/nginx/conf.dというディレクトリの中には、
# default.confというものがあるが、ここを./nginx/app.confのファイルとバインドマウント
# することによって、設定を変える

# ちなみに/nginx:/etc/nginx/nginx.confという設定ファイルもあるが、
# このファイルの最後の行にinclude /etc/nginx/conf.d/*.confというものがあり、
# ./nginx:/etc/nginx/conf.dで書いた設定ファイルが元の設定ファイルに上書きされる
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# nginxの不思議
# dockerでstaticをvolumeすると、50x.html index.htmlも勝手にできる 謎だ,,
# ちなみに以下のようなバインドマウントの場合は、そのような現象は起きない
# - static_data:/media
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# volumeに関して
# volumesはディレクトリーの同期
# volumeを設定することで、コンテナの中で作ったファイルはローカルにも共有されて消えなく
# なるし、自分のパソコン上にあるpythonファイルを./appに置くことで、コンテナ側でも
# 使うことができる

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# portsに関して
# ブラウザーでlocalhost8000ききたら、コンテナの8080番ポートに繋いでねという意味
# ports:
#   - 8000:8080

# つまり、ホスト側のポート番号:コンテナ側のポート番号

# また、コンテナ内では、command: python3 manage.py runserver 0.0.0.0:8080で
# サーバーを動かしているので、サーバーが起動している状態になる

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# dockerのコンテナの中に入るまでのコマンド

# コンテナを立ち上げる
# docker-compose up -d

# 以下のコマンドで、どのコンテナ名がわかる 今回であればapp
# docker-compose ps --service

# コンテナの中に入る。exec コンテナ名を入れる
# docker-compose exec app /bin/sh
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# docker-compose.ymlの変更を反映させる
# foregroundで起動
# docker-compose up

# backgroundで起動
# docker-compose up -d
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# Dockerfile or ビルド処理の変更を反映させる
# foregroundで起動
# docker-compose up --build

# backgroundで起動
# docker-compose up -d --build
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# コンテナのmigrationのコマンド
# docker-compose run app python manage.py showmigrations
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# - から始めると、配列の要素を表現できる
# - aaa
# - bbb
# - ccc
# 上の記述は、パースすると次のような配列になる => ["aaa","bbb", "ccc"]
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# コロンで区切るとハッシュになる
# user:usr1  => {"user": "user1"}

# つまり、以下のものをパースすると
# volumes:
#   - ./db:/db
# [{"./db": "/db"}]
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# pgadminに関して 2020 5 20
# dbでポートを5432に設定することで、pgadminと連携することができる
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# .envファイルに関して 2020 5 20
# .envには、コンテナで参照するデフォルトの環境変数を定義する。このファイルは特殊で
# docker-compose.ymlから参照する定義を記載せずとも有効になる
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# postgresのvolume 注意点 2020 5 21

# postgresのvolumeは、トップレベルで書かないと,サーバー側から読めなくなるので、
# トップレベルでvolumeを書いてから行う

# ex)
# トップレベルに書く「名前付きvolumes」は複数サービスから参照できる
# volumes:
#   postgres_data:

# services:
#   db:
#     image: postgres
#     volumes:
#       - postgres_data:/var/lib/postgresql/data

# 注意点2
# ちなみに、以下のようにホストのディレクトリにマウントしした場合、localhostでアクセスした場合
# ERR_EMPTY_RESPONSEという形でエラーが起きる

# - ./postgres_data:/var/lib/postgresql/data
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# apkコマンドに--no-cache オプションを付けることで、
# ローカルキャッシュを使用せず、ダウンロードしたパッケージファイルも実行後に削除されます。
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# volumeに関して 2020 5 21
# データボリュームには名前付きボリュームと匿名ボリュームの2種類がある
# 匿名ボリュームを利用した場合もデータの永続化はできます。
# しかし、永続化したデータの再利用については、名前付きボリュームのようにうまくはできません
# 匿名ボリュームはコンテナが新しく作成されるたびに新たに作成されます。

# volumes:  --> 名前つきvolumes
#   postgres_data:

# services:
#   db:
#     image: postgres
#     volumes:
#       - /var/lib/postgresql/data  --> 匿名volumes
#       - ./postgres_data:/var/lib/postgresql/data --> ※ディレクトリのマウント（同期）

# https://nishinatoshiharu.com/docker-volume-tutorial/

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# volumeに関しての実験(上記のコードの場合) 2020 5 21

# ~~~ディレクトリのマウント（同期）の結果~~~
# docker volume ls
# DRIVER              VOLUME NAME
# ディレクトリのマウント（同期）の結果の結果は、volumeには登録されていない!!!

# ~~~匿名volumesの結果~~~
# docker volume ls
# DRIVER              VOLUME NAME
# local               88aadfe9e93417e488a332b6987cf9070c3333a4136426100337db098c6a28b2
# 新しくdocker-compose upした場合、新しいvolumeが作られる

# ~~~名前付きvolumesの結果~~~
# docker volume ls
# DRIVER              VOLUME NAME
# local               yorozuapi_postgres_data
# 新しくdocker-compose upした場合、新しいvolumeが作られない

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# ディレクトリのマウント（同期）のvolumeに関して 2020 5 21
# volumeを持つことができるがパーミッションエラーになってしまう
# アウトパターン
#   volumes:
#     - ./postgres_data:/var/lib/postgresql/data --> ※ディレクトリのマウント（同期）
# https://qiita.com/reflet/items/5c0a488494c7d6904084
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
# volumeに関してのコマンド
# Volumeの一覧確認
# docker volume ls

# 未使用のVolumeを一括削除
# docker volume prune
# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

# env_fileとenvironmentの使い分け

# env_fileは、外部ファイルに環境変数を定義して、読み込む
# environmentは、コンテナでしか使わない環境変数を定義する時に

# ＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
